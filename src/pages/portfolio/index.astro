---
// src/pages/portfolio/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '@layouts/BaseLayout.astro';
import TagFilter from '@components/interactive/TagFilter.tsx';

/**
 * Portfolio Index Page
 *
 * This page displays all projects in a chronological list. It features an
 * interactive filtering system that allows users to narrow down the projects
 * by tags.
 *
 * The filtering is handled by the `TagFilter` Preact component, which runs
 * on the client. The list of projects is updated client-side for a fast,
 * seamless user experience.
 */

// Fetch all projects and sort them newest first.
const allProjects = await getCollection('projects');
const sortedProjects = allProjects.sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

const pageTitle = 'Portfolio';
const pageDescription =
  'A chronological collection of my work in design and development. Filter by tag to explore specific areas of interest.';
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="mx-auto max-w-3xl px-4 py-16 sm:px-6 sm:py-24 lg:px-8">
    <!-- Page Header -->
    <header class="text-center">
      <h1 class="font-heading text-4xl font-bold uppercase tracking-wider sm:text-5xl">
        Portfolio
      </h1>
      <p class="mx-auto mt-4 max-w-2xl font-body text-lg text-text/80">
        A chronological collection of my work. Use the filters below to
        explore projects by specific disciplines and technologies.
      </p>
    </header>

    <!--
      Tag Filter Component
      - `client:load` ensures the component's JS is loaded as soon as possible.
      - We pass the full list of projects to the component so it can derive all unique tags.
    -->
    <div class="mt-12">
      <TagFilter
        client:load
        projects={sortedProjects}
        filteredCount={sortedProjects.length}
      />
    </div>

    <hr class="editorial-rule mt-8" />

    <!--
      Project List
      - Each project is tagged with its tags in a `data-tags` attribute.
      - The script below will toggle a `hidden` class based on the filter selection.
    -->
    <section aria-labelledby="portfolio-heading">
      <h2 id="portfolio-heading" class="sr-only">All Projects</h2>
      <ul class="flex flex-col gap-y-16">
        {
          sortedProjects.map((project) => (
            <li
              class="project-item"
              data-tags={project.data.tags.join(',')}
            >
              <a
                href={`/portfolio/${project.slug}/`}
                class="block rounded-sm p-8 transition-colors hover:bg-text/5"
              >
                <h3 class="font-heading text-3xl font-bold text-accent">
                  {project.data.title}
                </h3>
                <p class="mt-2 text-text/80">{project.data.summary}</p>
                <div class="mt-4 flex items-center gap-x-4">
                  {project.data.hasPrototype && (
                    <span class="font-mono text-sm uppercase">↗ Try Prototype</span>
                  )}
                  <span class="font-mono text-sm uppercase text-accent underline">
                    ⇌ See Breakdown
                  </span>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </section>
  </div>
</BaseLayout>

<script>
  // This script handles the client-side filtering logic.
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('tag-filter-container');
    const projectItems = document.querySelectorAll('.project-item');
    const filterStatus = document.getElementById('filter-status');

    if (!container) return;

    // Listen for the custom 'filterchange' event from the TagFilter component.
    container.addEventListener('filterchange', ((event: CustomEvent) => {
      const activeTags = event.detail.tags as string[];
      let visibleCount = 0;

      // Loop through each project item.
      projectItems.forEach((item) => {
        const projectElement = item as HTMLElement;
        const projectTags = (
          projectElement.dataset.tags || ''
        ).split(',');

        // Determine if the project should be visible.
        const isVisible =
          activeTags.length === 0 ||
          activeTags.every((tag) => projectTags.includes(tag));

        // Toggle the 'hidden' class based on visibility.
        projectElement.classList.toggle('hidden', !isVisible);

        if (isVisible) {
          visibleCount++;
        }
      });

      // Update the aria-live region with the new count for screen readers.
      if (filterStatus) {
        filterStatus.textContent = `${visibleCount} ${
          visibleCount === 1 ? 'project' : 'projects'
        } now showing.`;
      }
    }) as EventListener);
  });
</script>
